{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","varient","start","end","value","duration","seprator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundcolor","barChart","backgroundColor","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.250d3735.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__P_Nrb\",\"card\":\"Cards_card__3QfKl\",\"infected\":\"Cards_infected__2WiSE\",\"recovered\":\"Cards_recovered__1Rxqu\",\"deaths\":\"Cards_deaths__1wA68\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from  'classnames';\r\nimport styles from \"./Cards.module.css\";\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"loading.....\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"{styles.container}\">\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography> \r\n            <Typography varient=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.8}\r\n                seprator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography varient=\"body2\">\r\n              Number of Infected Cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)} >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography varient=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.8}\r\n                seprator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography varient=\"body2\">\r\n              Number of Recovered Cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)} >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography varient=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.8}\r\n                seprator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography varient=\"body2\">\r\n              Number of Death Cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\nif (country){\r\n  changeableUrl = `${url}/countries/${country}`;\r\n}\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate }\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n   \r\nconst modifiedData = data.map((dailyData) =>\r\n({\r\n confirmed: dailyData.confirmed.total,\r\ndeaths: dailyData.deaths.total,\r\ndate: dailyData.reportDate,\r\n\r\n}))\r\n return modifiedData;\r\n  } catch (error) {\r\nconsole.log(error);\r\n  }\r\n}\r\n\r\n export const fetchCountries = async () => {\r\ntry{\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n}catch(error){\r\nconsole.log(error);\r\n} \r\n }\r\n\r\n ","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({data:{confirmed,recovered,deaths},country}) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    \r\n    \r\n    fetchAPI();\r\n  },[]);\r\n  const lineChart =\r\n  (\r\n    dailyData.length)\r\n\r\n  ? (\r\n    <Line\r\n      data={{ \r\n        labels: dailyData.map(({date}) => date),\r\n        datasets: [{\r\ndata: dailyData.map(({confirmed}) => confirmed),\r\nlabel: 'infected',\r\nborderColor:'#3333ff',\r\nfill: true,\r\n        }, {\r\n          data: dailyData.map(({deaths}) => deaths),\r\n          label: 'deaths',\r\n          borderColor:'red',\r\n          backgroundcolor: 'rgba(255,0,0,0.5)',\r\n          fill: true,\r\n        }],\r\n      }}\r\n    />\r\n  ) : null;\r\n  \r\nconst barChart = (\r\n\r\nconfirmed\r\n?(\r\n  <Bar \r\n  data = {{\r\nlabels: ['Infected','Recovered','Deaths'],\r\ndatasets: [{\r\nlabel: 'People',\r\nbackgroundColor: [\r\n'rgba(9, 9, 233, 0.938)',\r\n'rgba(29, 146, 5, 0.966)', \r\n'rgba(202, 11, 11, 0.904)'\r\n],\r\ndata:[confirmed.value,recovered.value,deaths.value]\r\n}]\r\n  }}\r\noptions={{  \r\n  legend: {display:false},\r\n  title: {display:true, text:`Covid-19 statistics in ${country}`,}\r\n}}\r\n  />\r\n) :null\r\n); \r\n  return (\r\n<div className={ styles.container}>  \r\n  {country ? barChart : lineChart}\r\n</div>\r\n  )\r\n  }\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n  },[setFetchedCountries]);\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) =>  handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global </option>\r\n  {fetchedCountries.map((country,i) => <option key={i} value= {country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  )\r\n}\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\nimport image from \"./images/image.png\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n\r\n    this.setState({ data: fetchedData });\r\n  }\r\n  handleCountryChange =async (country) =>{\r\n const fetchedData = await fetchData(country);\r\n console.log(fetchedData);\r\n  this.setState({data: fetchedData, country: country});\r\n  } \r\n  render() {\r\n    const { data,country } = this.state;  \r\n    return ( \r\n      <div className= {styles.container}>\r\n<img className={styles.image}  src={image} alt=\"COVID-19\" />\r\n\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart  data= {data} country={country}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2MMQY\",\"image\":\"App_image__1t3Fw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__PrEuP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1LQNn\"};","module.exports = __webpack_public_path__ + \"static/media/image.9830c6d3.png\";"],"sourceRoot":""}